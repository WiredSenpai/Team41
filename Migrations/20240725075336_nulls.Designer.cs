// <auto-generated />
using System;
using Group41_Wired_Martians.Areas.Identity.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Group41_Wired_Martians.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240725075336_nulls")]
    partial class nulls
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Group41_Wired_Martians.Areas.Identity.Data.Users", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Group41_Wired_Martians.Models.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryID"));

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryID");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryID = 1,
                            CategoryName = "Single Door Fridges",
                            CreatedDate = new DateOnly(2024, 7, 4),
                            Description = "Compact single door fridges suitable for small Drinks.",
                            ImageURL = "https://bosscateringequipment.co.za/wp-content/uploads/2021/09/upright-single-300x360.jpg",
                            Status = "Active"
                        },
                        new
                        {
                            CategoryID = 2,
                            CategoryName = "Double Door Fridges",
                            CreatedDate = new DateOnly(2024, 1, 8),
                            Description = "Spacious double door fridges with separate freezer compartments.",
                            ImageURL = "https://bosscateringequipment.co.za/wp-content/uploads/2021/09/DOUBLE-DOOR-FRIDGE-300x275.jpg",
                            Status = "Active"
                        },
                        new
                        {
                            CategoryID = 3,
                            CategoryName = "Chest Freezer",
                            CreatedDate = new DateOnly(2024, 6, 9),
                            Description = "a large container operated by electricity, with a lid that opens at the top, that stores food at a very cold temperature so that it freezes and can be kept safely for a long time",
                            ImageURL = "https://www.mhcworld.co.za/cdn/shop/products/kic-kic-300l-white-chest-freezer-kcg300-6847168053337.jpg?v=1665110360",
                            Status = "Active"
                        },
                        new
                        {
                            CategoryID = 4,
                            CategoryName = "Freezer Explosion-Proof",
                            CreatedDate = new DateOnly(2024, 9, 14),
                            Description = "Fast freezing Explosion-proof performance: Explosion Grade 2, ignition level G4.",
                            ImageURL = "https://qtetech.com/uploads/products/Nihon%20Freezer/Nihon_Freezer_EP-400.jpg",
                            Status = "Active"
                        },
                        new
                        {
                            CategoryID = 5,
                            CategoryName = "Under Bar",
                            CreatedDate = new DateOnly(2024, 7, 4),
                            Description = "Portable mini fridges ideal for Bars To keep Small Products.",
                            ImageURL = "https://media.takealot.com/covers_images/9eda8640894e44e4bfd5c634ef80e4bb/s-pdpxl.file",
                            Status = "Active"
                        });
                });

            modelBuilder.Entity("Group41_Wired_Martians.Models.CompanyDetails", b =>
                {
                    b.Property<int>("CompanyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyID"));

                    b.Property<string>("AddressLine1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surburb")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("code")
                        .HasColumnType("int");

                    b.HasKey("CompanyID");

                    b.ToTable("CompanyDetails");

                    b.HasData(
                        new
                        {
                            CompanyID = 1,
                            AddressLine1 = "444 Govan Mbeki St",
                            City = "Gqeberha",
                            CompanyName = "Wired Martians",
                            Email = "WWW.martiansinfo@wiredmartians.ac.za",
                            Fax = " (678) 887-6079",
                            Logo = "https://imgur.com/mBajPzE",
                            Phone = " (678) 456-6699",
                            Surburb = "North End",
                            code = 6001
                        });
                });

            modelBuilder.Entity("Group41_Wired_Martians.Models.Customer", b =>
                {
                    b.Property<int>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerID"));

                    b.Property<string>("AddressLine1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surburb")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("code")
                        .HasColumnType("int");

                    b.HasKey("CustomerID");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            CustomerID = 1,
                            AddressLine1 = "56 Main Street",
                            Avatar = "/Images/Profile-Avatars/Customer5.jpg",
                            City = "Port Elizabeth",
                            CustomerEmail = "Lathitaa.doe@gmail.com",
                            CustomerNumber = "+27 -5684- 467",
                            FirstName = "Lathitaa",
                            LastName = "Mjungula",
                            Status = "Active",
                            Surburb = "Nort End",
                            code = 6001
                        },
                        new
                        {
                            CustomerID = 2,
                            AddressLine1 = "456 High Road",
                            Avatar = "/Images/Profile-Avatars/profile2.jpg",
                            City = "Durban",
                            CustomerEmail = "jane.smith@gmail.com",
                            CustomerNumber = "+27 -9348 -234",
                            FirstName = "Jane",
                            LastName = "Smith",
                            Status = "Active",
                            Surburb = "Morningside",
                            code = 4001
                        },
                        new
                        {
                            CustomerID = 3,
                            AddressLine1 = "789 King Street",
                            Avatar = "/Images/Profile-Avatars/Customer4.jpg",
                            City = "Johannesburg",
                            CustomerEmail = "michael.brown@gmail.com",
                            CustomerNumber = "+27 -5364 -645",
                            FirstName = "Michael",
                            LastName = "Brown",
                            Status = "Active",
                            Surburb = "Sandton",
                            code = 2196
                        },
                        new
                        {
                            CustomerID = 4,
                            AddressLine1 = "324 govan mbeki",
                            Avatar = "/Images/Profile-Avatars/Customer6.jpg",
                            City = "Port Elizabeth",
                            CustomerEmail = "Mila.Ngewu@gmail.com",
                            CustomerNumber = "+27 -3255- 452",
                            FirstName = "Mila",
                            LastName = "Ngewu",
                            Status = "Active",
                            Surburb = "North End",
                            code = 6001
                        },
                        new
                        {
                            CustomerID = 5,
                            AddressLine1 = "34 Ivana Drive",
                            Avatar = "/Images/Profile-Avatars/Customer3.jpg",
                            City = "Port Elizabeth",
                            CustomerEmail = "Asive.Petu@gmail.com",
                            CustomerNumber = "+27 -8332- 8877",
                            FirstName = "Asive",
                            LastName = "Petu",
                            Status = "Active",
                            Surburb = "Summerstrand",
                            code = 6001
                        });
                });

            modelBuilder.Entity("Group41_Wired_Martians.Models.FridgeAllocation", b =>
                {
                    b.Property<int>("AllocationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AllocationID"));

                    b.Property<DateOnly?>("AllocationDate")
                        .HasColumnType("date");

                    b.Property<string>("AllocationStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CustomerID")
                        .HasColumnType("int");

                    b.HasKey("AllocationID");

                    b.HasIndex("CustomerID");

                    b.ToTable("FridgeAllocations");
                });

            modelBuilder.Entity("Group41_Wired_Martians.Models.Inventory", b =>
                {
                    b.Property<int>("InventoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InventoryID"));

                    b.Property<int?>("Availability")
                        .HasColumnType("int");

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Damaged")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductID")
                        .HasColumnType("int");

                    b.Property<int?>("StockQuantity")
                        .HasColumnType("int");

                    b.HasKey("InventoryID");

                    b.HasIndex("ProductID");

                    b.ToTable("Inventories");

                    b.HasData(
                        new
                        {
                            InventoryID = 1,
                            Availability = 10,
                            Brand = "Fridgestar",
                            Damaged = 0,
                            IsDeleted = false,
                            Location = "Warehouse A",
                            ProductID = 1,
                            StockQuantity = 10
                        },
                        new
                        {
                            InventoryID = 2,
                            Availability = 14,
                            Brand = "Defy",
                            Damaged = 1,
                            IsDeleted = false,
                            Location = "Warehouse B",
                            ProductID = 2,
                            StockQuantity = 15
                        },
                        new
                        {
                            InventoryID = 3,
                            Availability = 6,
                            Brand = "LG",
                            Damaged = 2,
                            IsDeleted = false,
                            Location = "Warehouse B",
                            ProductID = 3,
                            StockQuantity = 8
                        },
                        new
                        {
                            InventoryID = 4,
                            Availability = 20,
                            Brand = "Crioni",
                            Damaged = 0,
                            IsDeleted = false,
                            Location = "Warehouse A",
                            ProductID = 4,
                            StockQuantity = 20
                        });
                });

            modelBuilder.Entity("Group41_Wired_Martians.Models.Product", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductID"));

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Capacity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("Dimensions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnergyRating")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgThumbnail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModelNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SupplierID")
                        .HasColumnType("int");

                    b.Property<string>("Warranty")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("SupplierID");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductID = 1,
                            Brand = "Fridgestar",
                            Capacity = "6000 Liters",
                            CategoryID = 2,
                            Dimensions = "420cm x 90cm x 115cm",
                            EnergyRating = "A",
                            ImgThumbnail = "https://example.com/thumb1.jpg",
                            ImgUrl = "https://bosscateringequipment.co.za/wp-content/uploads/2021/09/DOUBLE-DOOR-FRIDGE-300x275.jpg",
                            ModelNumber = "CSDF-100",
                            ProductName = "Display Fridge (Fridgestar) – Sliding Doors(Es1140)",
                            Status = "Active",
                            SupplierID = 1,
                            Warranty = "12 Months"
                        },
                        new
                        {
                            ProductID = 2,
                            Brand = "Defy",
                            Capacity = "481 Liters",
                            CategoryID = 3,
                            Dimensions = "150cm x 60cm x 70cm",
                            EnergyRating = "A+",
                            ImgThumbnail = "https://example.com/thumb2.jpg",
                            ImgUrl = "https://www.rochester.co.za/media/catalog/product/cache/2bc2f148dc23cafaa22d929dc6e18cfe/1/0/10016037_ecommerce_98ae.png",
                            ModelNumber = "DDF-200",
                            ProductName = "Defy Chest Freezer ECO DMF456",
                            Status = "Active",
                            SupplierID = 2,
                            Warranty = "24 Months"
                        },
                        new
                        {
                            ProductID = 3,
                            Brand = "LG",
                            Capacity = "420 Liters",
                            CategoryID = 1,
                            Dimensions = "180cm x 70cm x 80cm",
                            EnergyRating = "A++",
                            ImgThumbnail = "https://example.com/thumb3.jpg",
                            ImgUrl = "https://static.caterweb.co.za/5911-large_default/upright-freezer-420l-single-glass-door-.jpg",
                            ModelNumber = "SSSF-300",
                            ProductName = "LG FREEZER  - SINGLE GLASS DOOR",
                            Status = "Active",
                            SupplierID = 3,
                            Warranty = "24 Months"
                        },
                        new
                        {
                            ProductID = 4,
                            Brand = "Crioni",
                            Capacity = "400 Liters",
                            CategoryID = 5,
                            Dimensions = "1800 x 750 x 900mm",
                            EnergyRating = "A+++",
                            ImgThumbnail = "https://example.com/thumb4.jpg",
                            ImgUrl = "https://static.caterweb.co.za/5904-large_default/25-glass-door-underbar-fridge.jpg",
                            ModelNumber = "FDF-400",
                            ProductName = "2.5 GLASS DOOR UNDERBAR FRIDGE",
                            Status = "Active",
                            SupplierID = 4,
                            Warranty = "36 Months"
                        },
                        new
                        {
                            ProductID = 5,
                            Brand = "Nihon",
                            Capacity = "403 Liters",
                            CategoryID = 4,
                            Dimensions = "80cm x 40cm x 45cm",
                            EnergyRating = "A++",
                            ImgThumbnail = "https://example.com/thumb5.jpg",
                            ImgUrl = "https://qtetech.com/uploads/products/Nihon%20Freezer/Nihon_Freezer_EP-400.jpg",
                            ModelNumber = "PMF-50",
                            ProductName = "Nihon EP-400 Explosion-Proof Refrigerator 0-10oC",
                            Status = "Active",
                            SupplierID = 5,
                            Warranty = "12 Months"
                        });
                });

            modelBuilder.Entity("Group41_Wired_Martians.Models.ProductColors", b =>
                {
                    b.Property<int>("ColorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ColorID"));

                    b.Property<string>("ColorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Img")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("InventoryID")
                        .HasColumnType("int");

                    b.Property<string>("Qty")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ColorID");

                    b.HasIndex("InventoryID");

                    b.ToTable("ProductColors");

                    b.HasData(
                        new
                        {
                            ColorID = 1,
                            ColorName = "Red",
                            Img = "https://example.com/red.jpg",
                            InventoryID = 1,
                            Qty = "5"
                        },
                        new
                        {
                            ColorID = 2,
                            ColorName = "blue",
                            Img = "https://example.com/blue.jpg",
                            InventoryID = 1,
                            Qty = "5"
                        },
                        new
                        {
                            ColorID = 3,
                            ColorName = "White",
                            Img = "https://example.com/white.jpg",
                            InventoryID = 2,
                            Qty = "7"
                        },
                        new
                        {
                            ColorID = 4,
                            ColorName = "Black",
                            Img = "https://example.com/black.jpg",
                            InventoryID = 2,
                            Qty = "3"
                        },
                        new
                        {
                            ColorID = 5,
                            ColorName = "Peach",
                            Img = "https://example.com/Peach.jpg",
                            InventoryID = 2,
                            Qty = "8"
                        },
                        new
                        {
                            ColorID = 6,
                            ColorName = "White",
                            Img = "https://example.com/blue.jpg",
                            InventoryID = 4,
                            Qty = "20"
                        },
                        new
                        {
                            ColorID = 7,
                            ColorName = "White",
                            Img = "https://example.com/blue.jpg",
                            InventoryID = 3,
                            Qty = "8"
                        });
                });

            modelBuilder.Entity("Group41_Wired_Martians.Models.PurchaseItem", b =>
                {
                    b.Property<int>("ItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemID"));

                    b.Property<int?>("AllocationID")
                        .HasColumnType("int");

                    b.Property<int?>("ColorID")
                        .HasColumnType("int");

                    b.Property<int?>("InventoryID")
                        .HasColumnType("int");

                    b.Property<int?>("ProductColorsColorID")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ItemID");

                    b.HasIndex("AllocationID");

                    b.HasIndex("InventoryID");

                    b.HasIndex("ProductColorsColorID");

                    b.ToTable("PurchaseItems");
                });

            modelBuilder.Entity("Group41_Wired_Martians.Models.Supplier", b =>
                {
                    b.Property<int>("SupplierID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierID"));

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SuplierContact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SuplierEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupplierName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SupplierID");

                    b.ToTable("Suppliers");

                    b.HasData(
                        new
                        {
                            SupplierID = 1,
                            Status = "Active",
                            SuplierContact = "+27-4556-890",
                            SuplierEmail = "sales@cooltech.com",
                            SupplierName = "CoolTech Refrigeration"
                        },
                        new
                        {
                            SupplierID = 2,
                            Status = "Active",
                            SuplierContact = "987-654-3210",
                            SuplierEmail = "contact@kikappliances.com",
                            SupplierName = "Kik Appliances"
                        },
                        new
                        {
                            SupplierID = 3,
                            Status = "Active",
                            SuplierContact = "+27-1273-567",
                            SuplierEmail = "info@freshchill.com",
                            SupplierName = "Fresh Chill Solutions"
                        },
                        new
                        {
                            SupplierID = 4,
                            Status = "Active",
                            SuplierContact = "444-555-6666",
                            SuplierEmail = "support@frostyfreezers.com",
                            SupplierName = "Frosty Freezers Inc."
                        },
                        new
                        {
                            SupplierID = 5,
                            Status = "Active",
                            SuplierContact = "+27-3343-444",
                            SuplierEmail = "service@polarrefrigeration.com",
                            SupplierName = "Polar Refrigeration"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Group41_Wired_Martians.Models.FridgeAllocation", b =>
                {
                    b.HasOne("Group41_Wired_Martians.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Group41_Wired_Martians.Models.Inventory", b =>
                {
                    b.HasOne("Group41_Wired_Martians.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Group41_Wired_Martians.Models.Product", b =>
                {
                    b.HasOne("Group41_Wired_Martians.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Group41_Wired_Martians.Models.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Group41_Wired_Martians.Models.ProductColors", b =>
                {
                    b.HasOne("Group41_Wired_Martians.Models.Inventory", "Inventory")
                        .WithMany("ProductColors")
                        .HasForeignKey("InventoryID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("Group41_Wired_Martians.Models.PurchaseItem", b =>
                {
                    b.HasOne("Group41_Wired_Martians.Models.FridgeAllocation", "Allocation")
                        .WithMany("PurchaseItems")
                        .HasForeignKey("AllocationID");

                    b.HasOne("Group41_Wired_Martians.Models.Inventory", "Inventory")
                        .WithMany()
                        .HasForeignKey("InventoryID");

                    b.HasOne("Group41_Wired_Martians.Models.ProductColors", "ProductColors")
                        .WithMany()
                        .HasForeignKey("ProductColorsColorID");

                    b.Navigation("Allocation");

                    b.Navigation("Inventory");

                    b.Navigation("ProductColors");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Group41_Wired_Martians.Areas.Identity.Data.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Group41_Wired_Martians.Areas.Identity.Data.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Group41_Wired_Martians.Areas.Identity.Data.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Group41_Wired_Martians.Areas.Identity.Data.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Group41_Wired_Martians.Models.FridgeAllocation", b =>
                {
                    b.Navigation("PurchaseItems");
                });

            modelBuilder.Entity("Group41_Wired_Martians.Models.Inventory", b =>
                {
                    b.Navigation("ProductColors");
                });
#pragma warning restore 612, 618
        }
    }
}
